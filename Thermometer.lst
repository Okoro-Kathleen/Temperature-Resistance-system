CCS PCM C Compiler, Version 5.015, 5967               29-Aug-23 14:06

               Filename:   C:\Users\Kareen\Documents\SWEP\SWEP 2\Temperature Resistance system\Thermometer.lst

               ROM used:   1244 words (15%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           37 (10%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   440
0003:  NOP
.................... #include <Thermometer.h> 
.................... #include <16F876A.h> 
.................... //////////// Standard Header file for the PIC16F876A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F876A 
0004:  DATA 20,10
0005:  DATA 20,10
0006:  DATA 20,22
0007:  DATA E9,33
0008:  DATA 69,3A
0009:  DATA 61,36
000A:  DATA 00,00
000B:  DATA 20,10
000C:  DATA 20,2A
000D:  DATA E8,32
000E:  DATA F2,36
000F:  DATA EF,36
0010:  DATA 65,3A
0011:  DATA 65,39
0012:  DATA 00,00
0013:  DATA D4,32
0014:  DATA 6D,38
0015:  DATA 3A,10
0016:  DATA 25,36
0017:  DATA 75,10
0018:  DATA 43,00
*
00FA:  MOVF   0B,W
00FB:  MOVWF  2C
00FC:  BCF    0B.7
00FD:  BSF    03.5
00FE:  BSF    03.6
00FF:  BSF    0C.7
0100:  BSF    0C.0
0101:  NOP
0102:  NOP
0103:  BCF    03.5
0104:  BCF    03.6
0105:  BTFSC  2C.7
0106:  BSF    0B.7
0107:  BSF    03.6
0108:  MOVF   0C,W
0109:  ANDLW  7F
010A:  BTFSC  03.2
010B:  GOTO   14E
010C:  BCF    03.6
010D:  MOVWF  2C
010E:  BSF    03.6
010F:  MOVF   0D,W
0110:  BCF    03.6
0111:  MOVWF  2D
0112:  BSF    03.6
0113:  MOVF   0F,W
0114:  BCF    03.6
0115:  MOVWF  2E
0116:  MOVF   2C,W
0117:  MOVWF  35
0118:  CALL   0C7
0119:  MOVF   2D,W
011A:  BSF    03.6
011B:  MOVWF  0D
011C:  BCF    03.6
011D:  MOVF   2E,W
011E:  BSF    03.6
011F:  MOVWF  0F
0120:  BCF    03.6
0121:  MOVF   0B,W
0122:  MOVWF  2F
0123:  BCF    0B.7
0124:  BSF    03.5
0125:  BSF    03.6
0126:  BSF    0C.7
0127:  BSF    0C.0
0128:  NOP
0129:  NOP
012A:  BCF    03.5
012B:  BCF    03.6
012C:  BTFSC  2F.7
012D:  BSF    0B.7
012E:  BSF    03.6
012F:  RLF    0C,W
0130:  RLF    0E,W
0131:  ANDLW  7F
0132:  BTFSC  03.2
0133:  GOTO   14E
0134:  BCF    03.6
0135:  MOVWF  2C
0136:  BSF    03.6
0137:  MOVF   0D,W
0138:  BCF    03.6
0139:  MOVWF  2D
013A:  BSF    03.6
013B:  MOVF   0F,W
013C:  BCF    03.6
013D:  MOVWF  2E
013E:  MOVF   2C,W
013F:  MOVWF  35
0140:  CALL   0C7
0141:  MOVF   2D,W
0142:  BSF    03.6
0143:  MOVWF  0D
0144:  BCF    03.6
0145:  MOVF   2E,W
0146:  BSF    03.6
0147:  MOVWF  0F
0148:  INCF   0D,F
0149:  BTFSC  03.2
014A:  INCF   0F,F
014B:  BCF    03.6
014C:  GOTO   0FA
014D:  BSF    03.6
014E:  BCF    03.6
014F:  RETURN
*
01D8:  CLRF   77
01D9:  CLRF   78
01DA:  MOVF   2C,W
01DB:  BCF    03.0
01DC:  BTFSC  2D.0
01DD:  ADDWF  77,F
01DE:  RRF    77,F
01DF:  RRF    78,F
01E0:  BTFSC  2D.1
01E1:  ADDWF  77,F
01E2:  RRF    77,F
01E3:  RRF    78,F
01E4:  BTFSC  2D.2
01E5:  ADDWF  77,F
01E6:  RRF    77,F
01E7:  RRF    78,F
01E8:  BTFSC  2D.3
01E9:  ADDWF  77,F
01EA:  RRF    77,F
01EB:  RRF    78,F
01EC:  BTFSC  2D.4
01ED:  ADDWF  77,F
01EE:  RRF    77,F
01EF:  RRF    78,F
01F0:  BTFSC  2D.5
01F1:  ADDWF  77,F
01F2:  RRF    77,F
01F3:  RRF    78,F
01F4:  BTFSC  2D.6
01F5:  ADDWF  77,F
01F6:  RRF    77,F
01F7:  RRF    78,F
01F8:  BTFSC  2D.7
01F9:  ADDWF  77,F
01FA:  RRF    77,F
01FB:  RRF    78,F
01FC:  BCF    0A.3
01FD:  BCF    0A.4
01FE:  GOTO   468 (RETURN)
01FF:  MOVLW  8E
0200:  MOVWF  77
0201:  MOVF   2D,W
0202:  MOVWF  78
0203:  MOVF   2C,W
0204:  MOVWF  79
0205:  CLRF   7A
0206:  MOVF   78,F
0207:  BTFSS  03.2
0208:  GOTO   213
0209:  MOVF   79,W
020A:  MOVWF  78
020B:  CLRF   79
020C:  MOVLW  08
020D:  SUBWF  77,F
020E:  MOVF   78,F
020F:  BTFSS  03.2
0210:  GOTO   213
0211:  CLRF   77
0212:  GOTO   21B
0213:  BCF    03.0
0214:  BTFSC  78.7
0215:  GOTO   21A
0216:  RLF    79,F
0217:  RLF    78,F
0218:  DECF   77,F
0219:  GOTO   213
021A:  BCF    78.7
021B:  BCF    0A.3
021C:  BCF    0A.4
021D:  GOTO   46C (RETURN)
021E:  MOVF   2C,W
021F:  BTFSC  03.2
0220:  GOTO   2E3
0221:  MOVWF  38
0222:  MOVF   30,W
0223:  BTFSC  03.2
0224:  GOTO   2E3
0225:  SUBWF  38,F
0226:  BTFSS  03.0
0227:  GOTO   22D
0228:  MOVLW  7F
0229:  ADDWF  38,F
022A:  BTFSC  03.0
022B:  GOTO   2E3
022C:  GOTO   233
022D:  MOVLW  81
022E:  SUBWF  38,F
022F:  BTFSS  03.0
0230:  GOTO   2E3
0231:  BTFSC  03.2
0232:  GOTO   2E3
0233:  MOVF   38,W
0234:  MOVWF  77
0235:  CLRF   78
0236:  CLRF   79
0237:  CLRF   7A
0238:  CLRF   37
0239:  MOVF   2D,W
023A:  MOVWF  36
023B:  BSF    36.7
023C:  MOVF   2E,W
023D:  MOVWF  35
023E:  MOVF   2F,W
023F:  MOVWF  34
0240:  MOVLW  19
0241:  MOVWF  38
0242:  MOVF   33,W
0243:  SUBWF  34,F
0244:  BTFSC  03.0
0245:  GOTO   256
0246:  MOVLW  01
0247:  SUBWF  35,F
0248:  BTFSC  03.0
0249:  GOTO   256
024A:  SUBWF  36,F
024B:  BTFSC  03.0
024C:  GOTO   256
024D:  SUBWF  37,F
024E:  BTFSC  03.0
024F:  GOTO   256
0250:  INCF   37,F
0251:  INCF   36,F
0252:  INCF   35,F
0253:  MOVF   33,W
0254:  ADDWF  34,F
0255:  GOTO   288
0256:  MOVF   32,W
0257:  SUBWF  35,F
0258:  BTFSC  03.0
0259:  GOTO   271
025A:  MOVLW  01
025B:  SUBWF  36,F
025C:  BTFSC  03.0
025D:  GOTO   271
025E:  SUBWF  37,F
025F:  BTFSC  03.0
0260:  GOTO   271
0261:  INCF   37,F
0262:  INCF   36,F
0263:  MOVF   32,W
0264:  ADDWF  35,F
0265:  MOVF   33,W
0266:  ADDWF  34,F
0267:  BTFSS  03.0
0268:  GOTO   288
0269:  INCF   35,F
026A:  BTFSS  03.2
026B:  GOTO   288
026C:  INCF   36,F
026D:  BTFSS  03.2
026E:  GOTO   288
026F:  INCF   37,F
0270:  GOTO   288
0271:  MOVF   31,W
0272:  IORLW  80
0273:  SUBWF  36,F
0274:  BTFSC  03.0
0275:  GOTO   287
0276:  MOVLW  01
0277:  SUBWF  37,F
0278:  BTFSC  03.0
0279:  GOTO   287
027A:  INCF   37,F
027B:  MOVF   31,W
027C:  IORLW  80
027D:  ADDWF  36,F
027E:  MOVF   32,W
027F:  ADDWF  35,F
0280:  BTFSS  03.0
0281:  GOTO   265
0282:  INCF   36,F
0283:  BTFSS  03.2
0284:  GOTO   265
0285:  INCF   37,F
0286:  GOTO   265
0287:  BSF    7A.0
0288:  DECFSZ 38,F
0289:  GOTO   28B
028A:  GOTO   296
028B:  BCF    03.0
028C:  RLF    34,F
028D:  RLF    35,F
028E:  RLF    36,F
028F:  RLF    37,F
0290:  BCF    03.0
0291:  RLF    7A,F
0292:  RLF    79,F
0293:  RLF    78,F
0294:  RLF    39,F
0295:  GOTO   242
0296:  BTFSS  39.0
0297:  GOTO   29E
0298:  BCF    03.0
0299:  RRF    78,F
029A:  RRF    79,F
029B:  RRF    7A,F
029C:  RRF    39,F
029D:  GOTO   2A1
029E:  DECF   77,F
029F:  BTFSC  03.2
02A0:  GOTO   2E3
02A1:  BTFSC  39.7
02A2:  GOTO   2CA
02A3:  BCF    03.0
02A4:  RLF    34,F
02A5:  RLF    35,F
02A6:  RLF    36,F
02A7:  RLF    37,F
02A8:  MOVF   33,W
02A9:  SUBWF  34,F
02AA:  BTFSC  03.0
02AB:  GOTO   2B6
02AC:  MOVLW  01
02AD:  SUBWF  35,F
02AE:  BTFSC  03.0
02AF:  GOTO   2B6
02B0:  SUBWF  36,F
02B1:  BTFSC  03.0
02B2:  GOTO   2B6
02B3:  SUBWF  37,F
02B4:  BTFSS  03.0
02B5:  GOTO   2D9
02B6:  MOVF   32,W
02B7:  SUBWF  35,F
02B8:  BTFSC  03.0
02B9:  GOTO   2C1
02BA:  MOVLW  01
02BB:  SUBWF  36,F
02BC:  BTFSC  03.0
02BD:  GOTO   2C1
02BE:  SUBWF  37,F
02BF:  BTFSS  03.0
02C0:  GOTO   2D9
02C1:  MOVF   31,W
02C2:  IORLW  80
02C3:  SUBWF  36,F
02C4:  BTFSC  03.0
02C5:  GOTO   2CA
02C6:  MOVLW  01
02C7:  SUBWF  37,F
02C8:  BTFSS  03.0
02C9:  GOTO   2D9
02CA:  INCF   7A,F
02CB:  BTFSS  03.2
02CC:  GOTO   2D9
02CD:  INCF   79,F
02CE:  BTFSS  03.2
02CF:  GOTO   2D9
02D0:  INCF   78,F
02D1:  BTFSS  03.2
02D2:  GOTO   2D9
02D3:  INCF   77,F
02D4:  BTFSC  03.2
02D5:  GOTO   2E3
02D6:  RRF    78,F
02D7:  RRF    79,F
02D8:  RRF    7A,F
02D9:  MOVF   2D,W
02DA:  MOVWF  38
02DB:  MOVF   31,W
02DC:  XORWF  38,F
02DD:  BTFSS  38.7
02DE:  GOTO   2E1
02DF:  BSF    78.7
02E0:  GOTO   2E7
02E1:  BCF    78.7
02E2:  GOTO   2E7
02E3:  CLRF   77
02E4:  CLRF   78
02E5:  CLRF   79
02E6:  CLRF   7A
02E7:  BCF    0A.3
02E8:  BCF    0A.4
02E9:  GOTO   483 (RETURN)
02EA:  MOVF   2C,W
02EB:  BTFSC  03.2
02EC:  GOTO   35A
02ED:  MOVWF  34
02EE:  MOVF   30,W
02EF:  BTFSC  03.2
02F0:  GOTO   35A
02F1:  ADDWF  34,F
02F2:  BTFSC  03.0
02F3:  GOTO   2FB
02F4:  MOVLW  7F
02F5:  SUBWF  34,F
02F6:  BTFSS  03.0
02F7:  GOTO   35A
02F8:  BTFSC  03.2
02F9:  GOTO   35A
02FA:  GOTO   2FF
02FB:  MOVLW  81
02FC:  ADDWF  34,F
02FD:  BTFSC  03.0
02FE:  GOTO   35A
02FF:  MOVF   34,W
0300:  MOVWF  77
0301:  CLRF   78
0302:  CLRF   79
0303:  CLRF   7A
0304:  MOVF   2D,W
0305:  MOVWF  38
0306:  BSF    38.7
0307:  MOVF   2E,W
0308:  MOVWF  37
0309:  MOVF   2F,W
030A:  MOVWF  36
030B:  MOVLW  18
030C:  MOVWF  34
030D:  CLRF   35
030E:  BTFSS  36.0
030F:  GOTO   328
0310:  MOVF   33,W
0311:  ADDWF  7A,F
0312:  BTFSS  03.0
0313:  GOTO   31A
0314:  INCF   79,F
0315:  BTFSS  03.2
0316:  GOTO   31A
0317:  INCF   78,F
0318:  BTFSC  03.2
0319:  BSF    35.7
031A:  MOVF   32,W
031B:  ADDWF  79,F
031C:  BTFSS  03.0
031D:  GOTO   321
031E:  INCF   78,F
031F:  BTFSC  03.2
0320:  BSF    35.7
0321:  MOVF   31,W
0322:  MOVWF  2E
0323:  BSF    2E.7
0324:  MOVF   2E,W
0325:  ADDWF  78,F
0326:  BTFSC  03.0
0327:  BSF    35.7
0328:  RLF    35,F
0329:  RRF    78,F
032A:  RRF    79,F
032B:  RRF    7A,F
032C:  RRF    38,F
032D:  RRF    37,F
032E:  RRF    36,F
032F:  BCF    03.0
0330:  DECFSZ 34,F
0331:  GOTO   30D
0332:  MOVLW  01
0333:  ADDWF  77,F
0334:  BTFSC  03.0
0335:  GOTO   35A
0336:  BTFSC  78.7
0337:  GOTO   33F
0338:  RLF    38,F
0339:  RLF    7A,F
033A:  RLF    79,F
033B:  RLF    78,F
033C:  DECF   77,F
033D:  BTFSC  03.2
033E:  GOTO   35A
033F:  BTFSS  38.7
0340:  GOTO   350
0341:  INCF   7A,F
0342:  BTFSS  03.2
0343:  GOTO   350
0344:  INCF   79,F
0345:  BTFSS  03.2
0346:  GOTO   350
0347:  INCF   78,F
0348:  BTFSS  03.2
0349:  GOTO   350
034A:  RRF    78,F
034B:  RRF    79,F
034C:  RRF    7A,F
034D:  INCF   77,F
034E:  BTFSC  03.2
034F:  GOTO   35A
0350:  MOVF   2D,W
0351:  MOVWF  35
0352:  MOVF   31,W
0353:  XORWF  35,F
0354:  BTFSS  35.7
0355:  GOTO   358
0356:  BSF    78.7
0357:  GOTO   35E
0358:  BCF    78.7
0359:  GOTO   35E
035A:  CLRF   77
035B:  CLRF   78
035C:  CLRF   79
035D:  CLRF   7A
035E:  BCF    0A.3
035F:  BCF    0A.4
0360:  GOTO   49A (RETURN)
0361:  MOVLW  8E
0362:  MOVWF  77
0363:  MOVF   2C,W
0364:  SUBWF  77,F
0365:  MOVF   2D,W
0366:  MOVWF  79
0367:  MOVF   2E,W
0368:  MOVWF  78
0369:  BSF    79.7
036A:  MOVF   77,F
036B:  BTFSC  03.2
036C:  GOTO   378
036D:  BCF    03.0
036E:  MOVF   79,F
036F:  BTFSS  03.2
0370:  GOTO   374
0371:  MOVF   78,F
0372:  BTFSC  03.2
0373:  GOTO   378
0374:  RRF    79,F
0375:  RRF    78,F
0376:  DECFSZ 77,F
0377:  GOTO   36D
0378:  BTFSS  2D.7
0379:  GOTO   37F
037A:  COMF   78,F
037B:  COMF   79,F
037C:  INCF   78,F
037D:  BTFSC  03.2
037E:  INCF   79,F
037F:  BCF    0A.3
0380:  BCF    0A.4
0381:  GOTO   4A3 (RETURN)
0382:  MOVF   0B,W
0383:  MOVWF  2D
0384:  BCF    0B.7
0385:  BSF    03.5
0386:  BSF    03.6
0387:  BSF    0C.7
0388:  BSF    0C.0
0389:  NOP
038A:  NOP
038B:  BCF    03.5
038C:  BCF    03.6
038D:  BTFSC  2D.7
038E:  BSF    0B.7
038F:  BTFSC  03.0
0390:  GOTO   3B9
0391:  BSF    03.6
0392:  MOVF   0C,W
0393:  ANDLW  7F
0394:  BCF    03.6
0395:  MOVWF  2D
0396:  BSF    03.6
0397:  MOVF   0D,W
0398:  BCF    03.6
0399:  MOVWF  2E
039A:  BSF    03.6
039B:  MOVF   0F,W
039C:  BCF    03.6
039D:  MOVWF  2F
039E:  MOVF   2D,W
039F:  MOVWF  35
03A0:  CALL   0C7
03A1:  MOVF   2E,W
03A2:  BSF    03.6
03A3:  MOVWF  0D
03A4:  BCF    03.6
03A5:  MOVF   2F,W
03A6:  BSF    03.6
03A7:  MOVWF  0F
03A8:  BCF    03.6
03A9:  MOVF   0B,W
03AA:  MOVWF  30
03AB:  BCF    0B.7
03AC:  BSF    03.5
03AD:  BSF    03.6
03AE:  BSF    0C.7
03AF:  BSF    0C.0
03B0:  NOP
03B1:  NOP
03B2:  BCF    03.5
03B3:  BCF    03.6
03B4:  BTFSC  30.7
03B5:  BSF    0B.7
03B6:  DECFSZ 2C,F
03B7:  GOTO   3B9
03B8:  GOTO   3D8
03B9:  BSF    03.6
03BA:  RLF    0C,W
03BB:  RLF    0E,W
03BC:  ANDLW  7F
03BD:  BCF    03.6
03BE:  MOVWF  2D
03BF:  BSF    03.6
03C0:  MOVF   0D,W
03C1:  BCF    03.6
03C2:  MOVWF  2E
03C3:  BSF    03.6
03C4:  MOVF   0F,W
03C5:  BCF    03.6
03C6:  MOVWF  2F
03C7:  MOVF   2D,W
03C8:  MOVWF  35
03C9:  CALL   0C7
03CA:  MOVF   2E,W
03CB:  BSF    03.6
03CC:  MOVWF  0D
03CD:  BCF    03.6
03CE:  MOVF   2F,W
03CF:  BSF    03.6
03D0:  MOVWF  0F
03D1:  INCF   0D,F
03D2:  BTFSC  03.2
03D3:  INCF   0F,F
03D4:  BCF    03.0
03D5:  BCF    03.6
03D6:  DECFSZ 2C,F
03D7:  GOTO   382
03D8:  BCF    0A.3
03D9:  BCF    0A.4
03DA:  GOTO   4BE (RETURN)
03DB:  CLRF   34
03DC:  MOVF   04,W
03DD:  MOVWF  33
03DE:  BCF    34.0
03DF:  BTFSC  03.7
03E0:  BSF    34.0
03E1:  SWAPF  2D,W
03E2:  IORLW  F0
03E3:  MOVWF  2F
03E4:  ADDWF  2F,F
03E5:  ADDLW  E2
03E6:  MOVWF  30
03E7:  ADDLW  32
03E8:  MOVWF  32
03E9:  MOVF   2D,W
03EA:  ANDLW  0F
03EB:  ADDWF  30,F
03EC:  ADDWF  30,F
03ED:  ADDWF  32,F
03EE:  ADDLW  E9
03EF:  MOVWF  31
03F0:  ADDWF  31,F
03F1:  ADDWF  31,F
03F2:  SWAPF  2C,W
03F3:  ANDLW  0F
03F4:  ADDWF  31,F
03F5:  ADDWF  32,F
03F6:  RLF    31,F
03F7:  RLF    32,F
03F8:  COMF   32,F
03F9:  RLF    32,F
03FA:  MOVF   2C,W
03FB:  ANDLW  0F
03FC:  ADDWF  32,F
03FD:  RLF    2F,F
03FE:  MOVLW  07
03FF:  MOVWF  2E
0400:  MOVLW  0A
0401:  ADDWF  32,F
0402:  DECF   31,F
0403:  BTFSS  03.0
0404:  GOTO   401
0405:  ADDWF  31,F
0406:  DECF   30,F
0407:  BTFSS  03.0
0408:  GOTO   405
0409:  ADDWF  30,F
040A:  DECF   2F,F
040B:  BTFSS  03.0
040C:  GOTO   409
040D:  ADDWF  2F,F
040E:  DECF   2E,F
040F:  BTFSS  03.0
0410:  GOTO   40D
0411:  MOVLW  2E
0412:  MOVWF  04
0413:  BCF    03.7
0414:  MOVLW  07
0415:  ANDWF  33,W
0416:  BCF    33.6
0417:  ADDWF  04,F
0418:  MOVLW  32
0419:  SUBWF  04,W
041A:  BTFSC  03.2
041B:  BSF    33.6
041C:  MOVF   00,W
041D:  MOVWF  77
041E:  BTFSS  03.2
041F:  GOTO   428
0420:  BTFSC  33.6
0421:  GOTO   428
0422:  BTFSC  33.4
0423:  GOTO   43A
0424:  BTFSC  33.3
0425:  GOTO   428
0426:  MOVLW  20
0427:  GOTO   42B
0428:  BSF    33.3
0429:  BCF    33.4
042A:  MOVLW  30
042B:  ADDWF  77,F
042C:  CLRF   2D
042D:  MOVF   04,W
042E:  MOVWF  2C
042F:  BCF    2D.0
0430:  BTFSC  03.7
0431:  BSF    2D.0
0432:  MOVF   77,W
0433:  MOVWF  35
0434:  CALL   0C7
0435:  MOVF   2C,W
0436:  MOVWF  04
0437:  BCF    03.7
0438:  BTFSC  2D.0
0439:  BSF    03.7
043A:  INCF   04,F
043B:  BTFSS  33.6
043C:  GOTO   418
043D:  BCF    0A.3
043E:  BCF    0A.4
043F:  GOTO   4C5 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES hs,NOWDT,PUT,NOBROWNOUT,NOLVP,PROTECT                     
.................... #use fast_IO(A) 
.................... #use fast_IO(B) 
.................... #use fast_IO(C) 
.................... #use delay(crystal=20000000) 
*
0019:  MOVLW  36
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  06
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  7B
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
....................  
.................... //#define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #define LCD_ENABLE_PIN  PIN_B3                                   
.................... #define LCD_RS_PIN      PIN_B1                                     
.................... #define LCD_RW_PIN      PIN_B2                                    
.................... #define LCD_DATA4       PIN_B4                                   
.................... #define LCD_DATA5       PIN_B5                                    
.................... #define LCD_DATA6       PIN_B6                                     
.................... #define LCD_DATA7       PIN_B7              
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0076:  BSF    03.5
0077:  BSF    06.4
....................    output_float(LCD_DATA5); 
0078:  BSF    06.5
....................    output_float(LCD_DATA6); 
0079:  BSF    06.6
....................    output_float(LCD_DATA7); 
007A:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
007B:  BCF    03.5
007C:  BSF    06.2
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_enable(1); 
007E:  BSF    06.3
....................    delay_cycles(1); 
007F:  NOP
....................    high = lcd_read_nibble(); 
0080:  CALL   04B
0081:  MOVF   78,W
0082:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
0083:  BCF    06.3
....................    delay_cycles(1); 
0084:  NOP
....................    lcd_output_enable(1); 
0085:  BSF    06.3
....................    delay_us(1); 
0086:  GOTO   087
0087:  GOTO   088
0088:  NOP
....................    low = lcd_read_nibble(); 
0089:  CALL   04B
008A:  MOVF   78,W
008B:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
008C:  BCF    06.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
008D:  BSF    03.5
008E:  BCF    06.4
....................    output_drive(LCD_DATA5); 
008F:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0090:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0091:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0092:  BCF    03.5
0093:  SWAPF  3D,W
0094:  MOVWF  77
0095:  MOVLW  F0
0096:  ANDWF  77,F
0097:  MOVF   77,W
0098:  IORWF  3C,W
0099:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
004B:  CLRF   3E
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
004C:  MOVLW  00
004D:  BTFSC  06.4
004E:  MOVLW  01
004F:  IORWF  3E,F
....................    n |= input(LCD_DATA5) << 1; 
0050:  MOVLW  00
0051:  BTFSC  06.5
0052:  MOVLW  01
0053:  MOVWF  77
0054:  BCF    03.0
0055:  RLF    77,F
0056:  MOVF   77,W
0057:  IORWF  3E,F
....................    n |= input(LCD_DATA6) << 2; 
0058:  MOVLW  00
0059:  BTFSC  06.6
005A:  MOVLW  01
005B:  MOVWF  77
005C:  RLF    77,F
005D:  RLF    77,F
005E:  MOVLW  FC
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  IORWF  3E,F
....................    n |= input(LCD_DATA7) << 3; 
0062:  MOVLW  00
0063:  BTFSC  06.7
0064:  MOVLW  01
0065:  MOVWF  77
0066:  RLF    77,F
0067:  RLF    77,F
0068:  RLF    77,F
0069:  MOVLW  F8
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  3E,F
....................     
....................    return(n); 
006D:  MOVF   3E,W
006E:  MOVWF  78
....................   #else 
006F:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002D:  BTFSC  3D.0
002E:  GOTO   031
002F:  BCF    06.4
0030:  GOTO   032
0031:  BSF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0032:  BTFSC  3D.1
0033:  GOTO   036
0034:  BCF    06.5
0035:  GOTO   037
0036:  BSF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0037:  BTFSC  3D.2
0038:  GOTO   03B
0039:  BCF    06.6
003A:  GOTO   03C
003B:  BSF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003C:  BTFSC  3D.3
003D:  GOTO   040
003E:  BCF    06.7
003F:  GOTO   041
0040:  BSF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BSF    06.3
....................    delay_us(2); 
0043:  MOVLW  02
0044:  MOVWF  77
0045:  DECFSZ 77,F
0046:  GOTO   045
0047:  GOTO   048
0048:  NOP
....................    lcd_output_enable(0); 
0049:  BCF    06.3
004A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0070:  BSF    03.5
0071:  BCF    06.3
....................    lcd_rs_tris(); 
0072:  BCF    06.1
....................    lcd_rw_tris(); 
0073:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0074:  BCF    03.5
0075:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
009A:  MOVF   78,W
009B:  MOVWF  3C
009C:  BTFSC  3C.7
009D:  GOTO   076
....................    lcd_output_rs(address); 
009E:  MOVF   3A,F
009F:  BTFSS  03.2
00A0:  GOTO   0A3
00A1:  BCF    06.1
00A2:  GOTO   0A4
00A3:  BSF    06.1
....................    delay_cycles(1); 
00A4:  NOP
....................    lcd_output_rw(0); 
00A5:  BCF    06.2
....................    delay_cycles(1); 
00A6:  NOP
....................    lcd_output_enable(0); 
00A7:  BCF    06.3
....................    lcd_send_nibble(n >> 4); 
00A8:  SWAPF  3B,W
00A9:  MOVWF  3C
00AA:  MOVLW  0F
00AB:  ANDWF  3C,F
00AC:  MOVF   3C,W
00AD:  MOVWF  3D
00AE:  CALL   02D
....................    lcd_send_nibble(n & 0xf); 
00AF:  MOVF   3B,W
00B0:  ANDLW  0F
00B1:  MOVWF  3C
00B2:  MOVWF  3D
00B3:  CALL   02D
00B4:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
0166:  MOVLW  28
0167:  MOVWF  2D
0168:  MOVLW  0C
0169:  MOVWF  2E
016A:  MOVLW  01
016B:  MOVWF  2F
016C:  MOVLW  06
016D:  MOVWF  30
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
016E:  BCF    06.3
....................    lcd_output_rs(0); 
016F:  BCF    06.1
....................    lcd_output_rw(0); 
0170:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0171:  BSF    03.5
0172:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0173:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0174:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0175:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0176:  BCF    06.3
....................    lcd_rs_tris(); 
0177:  BCF    06.1
....................    lcd_rw_tris(); 
0178:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0179:  MOVLW  0F
017A:  BCF    03.5
017B:  MOVWF  36
017C:  CALL   019
....................    for(i=1;i<=3;++i) 
017D:  MOVLW  01
017E:  MOVWF  2C
017F:  MOVF   2C,W
0180:  SUBLW  03
0181:  BTFSS  03.0
0182:  GOTO   18B
....................    { 
....................        lcd_send_nibble(3); 
0183:  MOVLW  03
0184:  MOVWF  3D
0185:  CALL   02D
....................        delay_ms(5); 
0186:  MOVLW  05
0187:  MOVWF  36
0188:  CALL   019
0189:  INCF   2C,F
018A:  GOTO   17F
....................    } 
....................     
....................    lcd_send_nibble(2); 
018B:  MOVLW  02
018C:  MOVWF  3D
018D:  CALL   02D
....................    delay_ms(5); 
018E:  MOVLW  05
018F:  MOVWF  36
0190:  CALL   019
....................    for(i=0;i<=3;++i) 
0191:  CLRF   2C
0192:  MOVF   2C,W
0193:  SUBLW  03
0194:  BTFSS  03.0
0195:  GOTO   1A2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0196:  MOVLW  2D
0197:  ADDWF  2C,W
0198:  MOVWF  04
0199:  BCF    03.7
019A:  MOVF   00,W
019B:  MOVWF  31
019C:  CLRF   3A
019D:  MOVF   31,W
019E:  MOVWF  3B
019F:  CALL   070
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01A0:  INCF   2C,F
01A1:  GOTO   192
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00B5:  DECFSZ 37,W
00B6:  GOTO   0B8
00B7:  GOTO   0BB
....................       address=LCD_LINE_TWO; 
00B8:  MOVLW  40
00B9:  MOVWF  38
00BA:  GOTO   0BC
....................    else 
....................       address=0; 
00BB:  CLRF   38
....................       
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  36,W
00BE:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
00BF:  MOVF   38,W
00C0:  IORLW  80
00C1:  MOVWF  39
00C2:  CLRF   3A
00C3:  MOVF   39,W
00C4:  MOVWF  3B
00C5:  CALL   070
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C7:  MOVF   35,W
00C8:  XORLW  07
00C9:  BTFSC  03.2
00CA:  GOTO   0D5
00CB:  XORLW  0B
00CC:  BTFSC  03.2
00CD:  GOTO   0DA
00CE:  XORLW  06
00CF:  BTFSC  03.2
00D0:  GOTO   0E2
00D1:  XORLW  02
00D2:  BTFSC  03.2
00D3:  GOTO   0E8
00D4:  GOTO   0ED
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D5:  MOVLW  01
00D6:  MOVWF  36
00D7:  MOVWF  37
00D8:  CALL   0B5
00D9:  GOTO   0F2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DA:  CLRF   3A
00DB:  MOVLW  01
00DC:  MOVWF  3B
00DD:  CALL   070
....................                      delay_ms(2); 
00DE:  MOVLW  02
00DF:  MOVWF  36
00E0:  CALL   019
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E1:  GOTO   0F2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E2:  MOVLW  01
00E3:  MOVWF  36
00E4:  MOVLW  02
00E5:  MOVWF  37
00E6:  CALL   0B5
00E7:  GOTO   0F2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E8:  CLRF   3A
00E9:  MOVLW  10
00EA:  MOVWF  3B
00EB:  CALL   070
00EC:  GOTO   0F2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  3A
00EF:  MOVF   35,W
00F0:  MOVWF  3B
00F1:  CALL   070
....................      #endif 
....................    } 
00F2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... unsigned int8 anVal=0, deg=242; 
.................... unsigned int16 Ebi=0; 
.................... float Kath=0, bernie= 0; 
....................  
.................... void lcd_clear(){  
....................      lcd_putc('\f'); 
00F3:  MOVLW  0C
00F4:  MOVWF  35
00F5:  CALL   0C7
....................      delay_ms(10); 
00F6:  MOVLW  0A
00F7:  MOVWF  36
00F8:  CALL   019
00F9:  RETURN
.................... } 
....................  
.................... //void lcd_line(unsigned int8 w){ 
.................... //    if(w < 1) w = 1; 
.................... //    if(w > 2) w = 2; 
.................... //    lcd_gotoxy(1,w); 
.................... //    delay_ms(10); 
.................... //} 
....................  
.................... void lcd_line1(){ 
....................         lcd_gotoxy(1,1); 
*
01B8:  MOVLW  01
01B9:  MOVWF  36
01BA:  MOVWF  37
01BB:  CALL   0B5
....................         delay_ms(10); 
01BC:  MOVLW  0A
01BD:  MOVWF  36
01BE:  CALL   019
.................... } 
....................  
.................... void lcd_line2(){ 
....................         lcd_gotoxy(1,2); 
*
0150:  MOVLW  01
0151:  MOVWF  36
0152:  MOVLW  02
0153:  MOVWF  37
0154:  CALL   0B5
....................         delay_ms(10); 
0155:  MOVLW  0A
0156:  MOVWF  36
0157:  CALL   019
0158:  RETURN
.................... } 
....................     
.................... void sys_init(){ 
....................     output_a(0b00000000); 
0159:  CLRF   05
....................     output_b(0b00000000); 
015A:  CLRF   06
....................     output_c(0b00000000); 
015B:  CLRF   07
....................     set_tris_a(0b11111111); 
015C:  MOVLW  FF
015D:  BSF    03.5
015E:  MOVWF  05
....................     set_tris_b(0b00000000); 
015F:  MOVLW  00
0160:  MOVWF  06
....................     set_tris_c(0b00000000); 
0161:  MOVWF  07
....................     output_a(0b00000000); 
0162:  BCF    03.5
0163:  CLRF   05
....................     output_b(0b00000000); 
0164:  CLRF   06
....................     output_c(0b00000000); 
0165:  CLRF   07
....................      
....................     lcd_init(); 
....................      
....................     SETUP_ADC(ADC_CLOCK_INTERNAL); 
*
01A2:  BSF    03.5
01A3:  BCF    1F.6
01A4:  BCF    03.5
01A5:  BSF    1F.6
01A6:  BSF    1F.7
01A7:  BSF    03.5
01A8:  BCF    1F.7
01A9:  BCF    03.5
01AA:  BSF    1F.0
....................     SETUP_ADC_PORTS(AN0); 
01AB:  BSF    03.5
01AC:  BCF    1F.0
01AD:  BSF    1F.1
01AE:  BSF    1F.2
01AF:  BSF    1F.3
....................     SET_ADC_CHANNEL(0); 
01B0:  MOVLW  00
01B1:  MOVWF  78
01B2:  BCF    03.5
01B3:  MOVF   1F,W
01B4:  ANDLW  C7
01B5:  IORWF  78,W
01B6:  MOVWF  1F
....................     
....................     lcd_clear(); 
01B7:  CALL   0F3
....................     lcd_line1(); 
....................     lcd_putc("     Digital"); 
*
01BF:  MOVLW  04
01C0:  BSF    03.6
01C1:  MOVWF  0D
01C2:  MOVLW  00
01C3:  MOVWF  0F
01C4:  BCF    03.6
01C5:  CALL   0FA
....................     lcd_line2(); 
01C6:  CALL   150
....................     lcd_putc("   Thermometer"); 
01C7:  MOVLW  0B
01C8:  BSF    03.6
01C9:  MOVWF  0D
01CA:  MOVLW  00
01CB:  MOVWF  0F
01CC:  BCF    03.6
01CD:  CALL   0FA
....................     delay_ms(2000); 
01CE:  MOVLW  08
01CF:  MOVWF  2C
01D0:  MOVLW  FA
01D1:  MOVWF  36
01D2:  CALL   019
01D3:  DECFSZ 2C,F
01D4:  GOTO   1D0
01D5:  BCF    0A.3
01D6:  BCF    0A.4
01D7:  GOTO   45A (RETURN)
.................... } 
....................           
....................  
....................  
.................... void main() 
*
0440:  MOVF   03,W
0441:  ANDLW  1F
0442:  MOVWF  03
0443:  CLRF   20
0444:  MOVLW  F2
0445:  MOVWF  21
0446:  CLRF   23
0447:  CLRF   22
0448:  CLRF   27
0449:  CLRF   26
044A:  CLRF   25
044B:  CLRF   24
044C:  CLRF   2B
044D:  CLRF   2A
044E:  CLRF   29
044F:  CLRF   28
0450:  BSF    03.5
0451:  BSF    1F.0
0452:  BSF    1F.1
0453:  BSF    1F.2
0454:  BCF    1F.3
0455:  MOVLW  07
0456:  MOVWF  1C
0457:  BCF    03.7
.................... { 
....................    sys_init(); 
0458:  BCF    03.5
0459:  GOTO   159
....................     
....................    while(TRUE) 
....................    { 
....................      lcd_clear(); 
045A:  CALL   0F3
....................       
....................      anVal = read_adc(); 
045B:  BSF    1F.2
045C:  BTFSC  1F.2
045D:  GOTO   45C
045E:  MOVF   1E,W
045F:  MOVWF  20
....................      delay_ms(100); 
0460:  MOVLW  64
0461:  MOVWF  36
0462:  CALL   019
....................       
....................      Kath= anVal*5; 
0463:  MOVF   20,W
0464:  MOVWF  2C
0465:  MOVLW  05
0466:  MOVWF  2D
0467:  GOTO   1D8
0468:  MOVF   78,W
0469:  CLRF   2D
046A:  MOVWF  2C
046B:  GOTO   1FF
046C:  MOVF   7A,W
046D:  MOVWF  27
046E:  MOVF   79,W
046F:  MOVWF  26
0470:  MOVF   78,W
0471:  MOVWF  25
0472:  MOVF   77,W
0473:  MOVWF  24
....................      bernie = kath/255; 
0474:  MOVF   27,W
0475:  MOVWF  2F
0476:  MOVF   26,W
0477:  MOVWF  2E
0478:  MOVF   25,W
0479:  MOVWF  2D
047A:  MOVF   24,W
047B:  MOVWF  2C
047C:  CLRF   33
047D:  CLRF   32
047E:  MOVLW  7F
047F:  MOVWF  31
0480:  MOVLW  86
0481:  MOVWF  30
0482:  GOTO   21E
0483:  MOVF   7A,W
0484:  MOVWF  2B
0485:  MOVF   79,W
0486:  MOVWF  2A
0487:  MOVF   78,W
0488:  MOVWF  29
0489:  MOVF   77,W
048A:  MOVWF  28
....................      Ebi=bernie * 100; 
048B:  MOVF   2B,W
048C:  MOVWF  2F
048D:  MOVF   2A,W
048E:  MOVWF  2E
048F:  MOVF   29,W
0490:  MOVWF  2D
0491:  MOVF   28,W
0492:  MOVWF  2C
0493:  CLRF   33
0494:  CLRF   32
0495:  MOVLW  48
0496:  MOVWF  31
0497:  MOVLW  85
0498:  MOVWF  30
0499:  GOTO   2EA
049A:  MOVF   7A,W
049B:  MOVWF  2F
049C:  MOVF   79,W
049D:  MOVWF  2E
049E:  MOVF   78,W
049F:  MOVWF  2D
04A0:  MOVF   77,W
04A1:  MOVWF  2C
04A2:  GOTO   361
04A3:  MOVF   79,W
04A4:  MOVWF  23
04A5:  MOVF   78,W
04A6:  MOVWF  22
....................      delay_ms(10); 
04A7:  MOVLW  0A
04A8:  MOVWF  36
04A9:  CALL   019
....................       
....................      output_high(pin_c2); 
04AA:  BSF    07.2
....................      delay_ms(1000); 
04AB:  MOVLW  04
04AC:  MOVWF  2C
04AD:  MOVLW  FA
04AE:  MOVWF  36
04AF:  CALL   019
04B0:  DECFSZ 2C,F
04B1:  GOTO   4AD
....................       
....................       
....................      
....................      lcd_clear(); 
04B2:  CALL   0F3
....................      lcd_line2(); 
04B3:  CALL   150
....................      printf(lcd_putc "Temp: %lu C", Ebi); 
04B4:  MOVLW  13
04B5:  BSF    03.6
04B6:  MOVWF  0D
04B7:  MOVLW  00
04B8:  MOVWF  0F
04B9:  BCF    03.0
04BA:  MOVLW  06
04BB:  BCF    03.6
04BC:  MOVWF  2C
04BD:  GOTO   382
04BE:  MOVLW  10
04BF:  MOVWF  04
04C0:  MOVF   23,W
04C1:  MOVWF  2D
04C2:  MOVF   22,W
04C3:  MOVWF  2C
04C4:  GOTO   3DB
04C5:  MOVLW  20
04C6:  MOVWF  35
04C7:  CALL   0C7
04C8:  MOVLW  43
04C9:  MOVWF  35
04CA:  CALL   0C7
....................      lcd_gotoxy(9,2); 
04CB:  MOVLW  09
04CC:  MOVWF  36
04CD:  MOVLW  02
04CE:  MOVWF  37
04CF:  CALL   0B5
....................      lcd_putc(deg); 
04D0:  MOVF   21,W
04D1:  MOVWF  35
04D2:  CALL   0C7
....................      delay_ms(1000); 
04D3:  MOVLW  04
04D4:  MOVWF  2C
04D5:  MOVLW  FA
04D6:  MOVWF  36
04D7:  CALL   019
04D8:  DECFSZ 2C,F
04D9:  GOTO   4D5
04DA:  GOTO   45A
....................   } 
.................... } 
04DB:  SLEEP

Configuration Fuses:
   Word  1: 1F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG PROTECT
